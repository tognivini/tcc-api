"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var typeorm_1 = require("typeorm");
var crypto_1 = require("./crypto");
/**
 * Encrypt fields on entity.
 */
function encrypt(entity) {
    var e_1, _a;
    if (!entity) {
        return entity;
    }
    try {
        for (var _b = __values(typeorm_1.getMetadataArgsStorage().columns), _c = _b.next(); !_c.done; _c = _b.next()) {
            var columnMetadata = _c.value;
            var propertyName = columnMetadata.propertyName, mode = columnMetadata.mode, target = columnMetadata.target;
            var options = columnMetadata.options;
            var encrypt_1 = options.encrypt;
            if (encrypt_1 &&
                mode === 'regular' &&
                (encrypt_1.looseMatching || entity.constructor === target)) {
                if (entity[propertyName]) {
                    entity[propertyName] = crypto_1.encryptData(Buffer.from(entity[propertyName], 'utf8'), encrypt_1).toString('base64');
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return entity;
}
exports.encrypt = encrypt;
/**
 * Decrypt fields on entity.
 */
function decrypt(entity) {
    var e_2, _a;
    if (!entity) {
        return entity;
    }
    try {
        for (var _b = __values(typeorm_1.getMetadataArgsStorage().columns), _c = _b.next(); !_c.done; _c = _b.next()) {
            var columnMetadata = _c.value;
            var propertyName = columnMetadata.propertyName, mode = columnMetadata.mode, target = columnMetadata.target;
            var options = columnMetadata.options;
            var encrypt_2 = options.encrypt;
            if (encrypt_2 &&
                mode === 'regular' &&
                (encrypt_2.looseMatching || entity.constructor === target)) {
                if (entity[propertyName]) {
                    entity[propertyName] = crypto_1.decryptData(Buffer.from(entity[propertyName], 'base64'), encrypt_2).toString('utf8');
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return entity;
}
exports.decrypt = decrypt;
//# sourceMappingURL=entity.js.map